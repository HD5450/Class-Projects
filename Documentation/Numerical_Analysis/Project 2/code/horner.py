# -*- coding: utf-8 -*-
"""Least Squre Regression and Horner Method.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GGBkGZoJzEEJ7XnyLiHdVncjOTxcOjTv
"""

import sys
import time
import datetime
import os
import math
import numpy as np
import matplotlib as mpl
from matplotlib import pyplot as plt
from matplotlib import rc
from matplotlib.pyplot import legend

def polyLeastSquares(m, X):
    '''
    polynomial least squares curve fitting
    m = degree of the fitting polynomial
    
    X = array which contains the data points
    and is of shape (nDatapoints, 2)
    
    returns the fitted weights vector, which is of shape
    (m + 1,)
    
    Usage:
    m = 9
    w = polyLeastSquares(m, Xt) # Xt = training data
    # returns the weight vector w
    '''
    nDatapoints = X.shape[0]
    assert X.shape[1] == 2, "Error: Shape assertion failed."
    
    # fill the Vandermonde matrix V
    V = np.ones((nDatapoints, m + 1))
    
    # column vector
    tmp = np.ones((nDatapoints,))
    
    for i in range(m):
        tmp = np.multiply(tmp, X[:, 0])
        V[:, i + 1] = tmp
    
    # fill the right hand side
    b = np.ones((nDatapoints, 1))
    b[:, 0] = X[:, 1]
    
    A = np.matmul(V.transpose(), V)
    b = np.matmul(V.transpose(), b)
        
    # solve linear system A * w = b for the weights vector w
    w = np.linalg.solve(A, b)
    w = w.reshape((m + 1,))
    
    return w

def poly_horner(x, coeff):

    result = coeff[-1]
    for i in range(-2, -len(coeff) - 1, -1):
        result = result * x + coeff[i]
    return result

if __name__ == '__main__':
    
    ###################################################################
    # randomize training data
        
    Xt = np.random.uniform(-10,10,size=(21, 2))
    
    assert Xt.shape == (21, 2), "Error: Shape assertion failed."
    
    print("Training data shape =", Xt.shape)
    
    seedValue = 523456789

    ###################################################################
    
    # polynomial fitting orders
    jobs = np.arange(0, 5).reshape(-1)
    
    p1 = None 
    for m in jobs:
    
        # polynomial least squares fitting
        w = polyLeastSquares(m, Xt)
        print("fitted weights =", w)
        # use poly d to validate that Horner's method works
        # p1 = np.poly1d(w)
        # print the polynomial coefficients to compare with regression
        # print('Rebuilt polynomial from coefficients = {}'.format(p1))
        
        # create fitted model
    
        nModelPoints = 800
        xVals = np.linspace(-10.0, 10.0, nModelPoints)
        yVals = np.array([poly_horner(x, w) for x in xVals])
        Xm = np.zeros((nModelPoints, 2))
        Xm[:, 0] = xVals
        Xm[:, 1] = yVals