{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MA 428 Project 3","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"PgcZoIj97ujP","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np\n","\n","def eigSolver(m,c,k):\n","  \n","  m1 = m[0]\n","  m2 = m[1]\n","  m3 = m[2]\n","  m4 = m[3]\n","  \n","  c1 = c[0]\n","  c2 = c[1]\n","  c3 = c[2]\n","  \n","  k1 = k[0]\n","  k2 = k[1]\n","  k3 = k[2]\n","  k4 = k[3]\n","  k5 = k[4]\n","  \n","  M = np.diag([m1,m2,m3,m4])\n","  C = np.array([[c1+c2, 0, -c2, 0], [0, 0, 0, 0], [-c2, 0, c2+c3, -c3], [0, 0, -c3, c3,]])\n","  K = np.array([[k1+k2+k5, -k2, -k5, 0], [-k2, k2+k3, -k3, 0], [-k5, -k3, k3 + k4 + k5, -k4], [0, 0, -k4, k4]])\n","  \n","  return M, C, K\n","  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"9iVpWR0ZdOVW","colab_type":"code","colab":{}},"cell_type":"code","source":["M, C, K = eigSolver([1,2,3,1],[0.1,0.2,0.3],[1,2,1,4,3])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lOia71CedXgJ","colab_type":"code","outputId":"a5109f01-be15-473b-fc88-9fa5c34f9ae7","executionInfo":{"status":"ok","timestamp":1555764038173,"user_tz":240,"elapsed":251,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"cell_type":"code","source":["M"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 0, 0, 0],\n","       [0, 2, 0, 0],\n","       [0, 0, 3, 0],\n","       [0, 0, 0, 1]])"]},"metadata":{"tags":[]},"execution_count":6}]},{"metadata":{"id":"0M99sCvQw0js","colab_type":"code","outputId":"adecbdcb-d6c2-4682-c765-020e07e9d1d9","executionInfo":{"status":"ok","timestamp":1555764041736,"user_tz":240,"elapsed":296,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"cell_type":"code","source":["C"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.3,  0. , -0.2,  0. ],\n","       [ 0. ,  0. ,  0. ,  0. ],\n","       [-0.2,  0. ,  0.5, -0.3],\n","       [ 0. ,  0. , -0.3,  0.3]])"]},"metadata":{"tags":[]},"execution_count":7}]},{"metadata":{"id":"zOWmK_3gw1ar","colab_type":"code","outputId":"5714d187-11c6-4100-9349-8c92e1884249","executionInfo":{"status":"ok","timestamp":1555764047537,"user_tz":240,"elapsed":286,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"cell_type":"code","source":["K"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 6, -2, -3,  0],\n","       [-2,  3, -1,  0],\n","       [-3, -1,  8, -4],\n","       [ 0,  0, -4,  4]])"]},"metadata":{"tags":[]},"execution_count":8}]},{"metadata":{"id":"mJWQ7ouzuXJU","colab_type":"code","colab":{}},"cell_type":"code","source":["# Define the matrices\n","import numpy as np\n","from scipy import linalg\n","\n","m1 = 1.0\n","m2 = 1.0\n","\n","k1 = 1.0 \n","k2 = 1.0\n","k3 = 1.0\n","\n","c1 = 0.1\n","c2 = 0.1\n","c3 = 0.1\n","\n","# Redefine the damping matrix\n","C = np.asarray([[c1 + c2, -c2],\n","                [-c2,      c2 + c3]])\n","\n","\n","# Redefine the state-space matrix\n","A = np.asarray([[0,                     1,           0,           0],\n","                [-(k1+k2)/m1, -(c1+c2)/m1,       k2/m1,       c2/m1],\n","                [0,                     0,           0,           1],\n","                [k2/m2,             c2/m2, -(k2+k3)/m2, -(c2+c3)/m2]])\n","\n","\n","eigenvals_damped_ss, eigenvects_damped_ss = linalg.eig(A)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"v-P5safLEr2X","colab_type":"code","outputId":"4aab0f72-ee5c-4fc5-f184-96b69b2980b7","executionInfo":{"status":"ok","timestamp":1555853144991,"user_tz":240,"elapsed":532,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"cell_type":"code","source":["eigenvals_damped_ss"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-0.15+1.72554339j, -0.15-1.72554339j, -0.05+0.99874922j,\n","       -0.05-0.99874922j])"]},"metadata":{"tags":[]},"execution_count":25}]},{"metadata":{"id":"0XCWBCi9WDbV","colab_type":"code","colab":{}},"cell_type":"code","source":["# Reminding myself how to check real and complex parts\n","\n","target = -2+2j"],"execution_count":0,"outputs":[]},{"metadata":{"id":"EEVGkeo5WUHi","colab_type":"code","outputId":"a052ac1d-4222-4bec-cffc-621cec8d296e","executionInfo":{"status":"ok","timestamp":1555807433846,"user_tz":240,"elapsed":275,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["# Reminding myself how to check real and complex parts\n","\n","target.real"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-2.0"]},"metadata":{"tags":[]},"execution_count":7}]},{"metadata":{"id":"54RKPE6lWXMy","colab_type":"code","outputId":"c5e22873-6a29-4cfa-ea16-1d7cf393e7c3","executionInfo":{"status":"ok","timestamp":1555807444937,"user_tz":240,"elapsed":396,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["# Reminding myself how to check real and complex parts\n","\n","target.imag"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.0"]},"metadata":{"tags":[]},"execution_count":8}]},{"metadata":{"id":"G7BqZdHqWZ4J","colab_type":"code","colab":{}},"cell_type":"code","source":["# Here is Number 2\n","\n","import numpy as np\n","import scipy.linalg as la\n","import scipy.signal as signal\n","import matplotlib as mpl\n","\n","\n","mpl.rcParams[\"lines.linewidth\"] = 2\n","mpl.rcParams[\"figure.figsize\"] = (10, 6)\n","\n","\n","def compute_eigen_values(A, B = None):\n","    \"\"\"Return sorted eigenvector/eigenvalue pairs.\n","    e.g. for a given system linalg.eig will return eingenvalues as:\n","    (array([ 0. +89.4j,  0. -89.4j,  0. +89.4j,  0. -89.4j,  0.+983.2j,\n","             0.-983.2j,  0. +40.7j,  0. -40.7j])\n","    This function will sort this eigenvalues as:\n","    (array([ 0. +40.7j,  0. +89.4j,  0. +89.4j,  0.+983.2j,  0. -40.7j,\n","             0. -89.4j,  0. -89.4j,  0.-983.2j])\n","             \n","    Correspondent eigenvectors will follow the same order.\n","    Note: Works fine for moderately sized models. Does not leverage the\n","    full set of constraints to optimize the solution.\n","    Parameters\n","    ----------\n","    A: array\n","        A complex or real matrix whose eigenvalues and eigenvectors\n","        will be computed.\n","    B: float or str\n","        Right-hand side matrix in a generalized eigenvalue problem.\n","        Default is None, identity matrix is assumed.\n","    Returns\n","    -------\n","    evalues: array\n","        Sorted eigenvalues\n","    evectors: array\n","        Sorted eigenvalues\n","    Examples\n","    --------\n","    >>> L = np.array([[2, -1, 0],\n","    ...               [-4, 8, -4],\n","    ...               [0, -4, 4]])\n","    >>> lam, P = compute_eigen_values(L)\n","    >>> lam\n","    array([  0.56+0.j,   2.63+0.j,  10.81+0.j])\n","    \"\"\"\n","    if B is None:\n","        evalues, evectors = la.eig(A)\n","    else:\n","        evalues, evectors = la.eig(A, B)\n","\n","    if all(eigs == 0 for eigs in evalues.imag):\n","        if all(eigs > 0 for eigs in evalues.real):\n","            idxp = evalues.real.argsort()  # positive in increasing order\n","            idxn = np.array([], dtype=int)\n","        else:\n","            # positive in increasing order\n","            idxp = evalues.real.argsort()[int(len(evalues) / 2):]\n","            # negative in decreasing order\n","            idxn = evalues.real.argsort()[int(len(evalues) / 2) - 1:: -1]\n","\n","    else:\n","        # positive in increasing order\n","        idxp = evalues.imag.argsort()[int(len(evalues) / 2):]\n","        # negative in decreasing order\n","        idxn = evalues.imag.argsort()[int(len(evalues) / 2) - 1:: -1]\n","\n","    idx = np.hstack([idxp, idxn])\n","\n","    return evalues[idx], evectors[:, idx]\n","\n","\n","def normalize(X, Y):\n","    \"\"\"\n","    Return normalized left eigenvectors.\n","    This function is used to normalize vectors of the matrix\n","    Y with respect to X so that Y.T @ X = I (identity).\n","    This is used to normalize the matrix with the left eigenvectors.\n","    Parameters\n","    ----------\n","    X: array\n","        A complex or real matrix\n","    Y: array\n","        A complex or real matrix to be normalized\n","    Returns\n","    -------\n","    Yn: array\n","        Normalized matrix\n","    Examples\n","    --------\n","    >>> \n","    >>> X = np.array([[ 0.84+0.j  ,  0.14-0.j  ,  0.84-0.j  ,  0.14+0.j  ],\n","    ...               [ 0.01-0.3j ,  0.00+0.15j,  0.01+0.3j ,  0.00-0.15j],\n","    ...               [-0.09+0.42j, -0.01+0.65j, -0.09-0.42j, -0.01-0.65j],\n","    ...               [ 0.15+0.04j, -0.74+0.j  ,  0.15-0.04j, -0.74-0.j  ]])\n","    >>> Y = np.array([[-0.03-0.41j,  0.04+0.1j , -0.03+0.41j,  0.04-0.1j ],\n","    ...            [ 0.88+0.j  ,  0.68+0.j  ,  0.88-0.j  ,  0.68-0.j  ],\n","    ...            [-0.21-0.j  ,  0.47+0.05j, -0.21+0.j  ,  0.47-0.05j],\n","    ...            [ 0.00-0.08j,  0.05-0.54j,  0.00+0.08j,  0.05+0.54j]])\n","    >>> Yn = normalize(X, Y)\n","    >>> Yn \n","    array([[ 0.58-0.05j,  0.12-0.06j,  0.58+0.05j,  0.12+0.06j],\n","           [ 0.01+1.24j, -0.07-0.82j,  0.01-1.24j, -0.07+0.82j],\n","           [-0.  -0.3j ,  0.01-0.57j, -0.  +0.3j ,  0.01+0.57j],\n","           [ 0.11-0.j  , -0.66-0.01j,  0.11+0.j  , -0.66+0.01j]])\n","    \"\"\"\n","    Yn = np.zeros_like(X)\n","    YTX = Y.T @ X  # normalize y so that Y.T @ X will return I\n","    factors = [1 / a for a in np.diag(YTX)]\n","    # multiply each column in y by a factor in 'factors'\n","    for col in enumerate(Y.T):\n","        Yn[col[0]] = col[1] * factors[col[0]]\n","    Yn = Yn.T\n","\n","    return Yn\n","\n","\n","def modes_system_undamped(M, K):\n","    r\"\"\"Return eigensolution of multiple DOF system.\n","    Returns the natural frequencies (w),\n","    eigenvectors (P), mode shapes (S) and the modal transformation\n","    matrix S for an undamped system.\n","    See Notes for explanation of the underlying math.\n","    Parameters\n","    ----------\n","    M: float array\n","        Mass matrix\n","    K: float array\n","        Stiffness matrix\n","    Returns\n","    -------\n","    w: float array\n","        The natural frequencies of the system\n","    P: float array\n","        The eigenvectors of the system.\n","    S: float array\n","        The mass-normalized mode shapes of the system.\n","    Sinv: float array\n","        The modal transformation matrix S^-1(takes x -> r(modal coordinates))\n","    Notes\n","    -----\n","    Given :math:`M\\ddot{x}(t)+Kx(t)=0`, with mode shapes :math:`u`, the matrix\n","    of mode shapes :math:`S=[u_1 u_1 \\ldots]` can be created. If the modal\n","    coordinates are the vector :math:`r(t)`. The modal transformation separates\n","    space and time from :math:`x(t)` such that :math:`x(t)=S r(t)`.\n","    Substituting into the governing equation:\n","    :math:`MS\\ddot{r}(t)+KSr(t)=0`\n","    Premultiplying by :math:`S^T`\n","    :math:`S^TMS\\ddot{r}(t)+S^TKSr(t)=0`\n","    \n","    The matrices :math:`S^TMS` and :math:`S^TKS` will be diagonalized by this\n","    process (:math:`u_i` are the eigenvectors of :math:`M^{-1}K`).\n","    If scaled properly (mass normalized so :math:`u_i^TMu_i=1`) then\n","    :math:`S^TMS=I` and :math:`S^TKS=\\Omega^2` where :math:`\\Omega^2` is a\n","    diagonal matrix of the natural frequencies squared in radians per second.\n","    \n","    Further, inverses are unstable so the better way to solve linear equations is with\n","    Gauss elimination.\n","    :math:`AB=C` given known :math:`A` and :math:`C`\n","    is solved using `la.solve(A, C, assume_a='pos')`.\n","    :math:`BA=C` given known :math:`A` and :math:`C` is solved by first\n","    transposing the equation to :math:`A^TB^T=C^T`, then solving for\n","    :math:`C^T`. The resulting command is\n","    `la.solve(A.T, C.T, assume_a='pos').T`\n","    Examples\n","    --------\n","    >>> M = np.array([[4, 0, 0],\n","    ...               [0, 4, 0],\n","    ...               [0, 0, 4]])\n","    >>> K = np.array([[8, -4, 0],\n","    ...               [-4, 8, -4],\n","    ...               [0, -4, 4]])\n","    >>> w, P, S, Sinv = modes_system_undamped(M, K)\n","    >>> w \n","    array([0.45, 1.25, 1.8 ])\n","    >>> S\n","    array([[ 0.16, -0.37, -0.3 ],\n","           [ 0.3 , -0.16,  0.37],\n","           [ 0.37,  0.3 , -0.16]])\n","    \"\"\"\n","    L = la.cholesky(M)\n","    lam, P = compute_eigen_values(la.solve(L, la.solve(L, K, assume_a='pos').T,\n","                             assume_a='pos').T)\n","    w = np.real(np.sqrt(lam))\n","    S = la.solve(L, P, assume_a=\"pos\")\n","    Sinv = la.solve(L.T, P, assume_a=\"pos\").T\n","\n","    return w, P, S, Sinv\n","\n","\n","def modes_system(M, K, C = None):\n","    \"\"\"Natural frequencies, damping ratios, and mode shapes of the system.\n","    This function will return the natural frequencies (wn), the\n","    damped natural frequencies (wd), the damping ratios (zeta),\n","    the right eigenvectors (X) and the left eigenvectors (Y) for a\n","    system defined by M, K and C.\n","    If the dampind matrix 'C' is none or if the damping is proportional,\n","    wd and zeta will be none and X and Y will be equal.\n","    Parameters\n","    ----------\n","    M: array\n","        Mass matrix\n","    K: array\n","        Stiffness matrix\n","    C: array\n","        Damping matrix\n","    Returns\n","    -------\n","    wn: array\n","        The natural frequencies of the system\n","    wd: array\n","        The damped natural frequencies of the system\n","    zeta: array\n","        The damping ratios\n","    X: array\n","        The right eigenvectors\n","    Y: array\n","        The left eigenvectors\n","    Examples\n","    --------\n","    >>> M = np.array([[1, 0],\n","    ...               [0, 1]])\n","    >>> K = np.array([[2, -1],\n","    ...               [-1, 6]])\n","    >>> C = np.array([[0.3, -0.02],\n","    ...               [-0.02, 0.1]])\n","    >>> wn, wd, zeta, X, Y = modes_system(M, K, C)\n","    Damping is non-proportional, eigenvectors are complex.\n","    >>> wn \n","    array([1.33, 2.5 , 1.33, 2.5 ])\n","    >>> wd \n","    array([1.32, 2.5 , 1.32, 2.5 ])\n","    >>> zeta\n","    array([0.11, 0.02, 0.11, 0.02])\n","    >>> X \n","    array([[-0.06-0.58j, -0.01+0.08j, -0.06+0.58j, -0.01-0.08j],\n","           [-0.  -0.14j, -0.01-0.36j, -0.  +0.14j, -0.01+0.36j],\n","           [ 0.78+0.j  , -0.21-0.03j,  0.78-0.j  , -0.21+0.03j],\n","           [ 0.18+0.01j,  0.9 +0.j  ,  0.18-0.01j,  0.9 -0.j  ]])\n","    >>> Y \n","    array([[ 0.02+0.82j,  0.01-0.31j,  0.02-0.82j,  0.01+0.31j],\n","           [-0.05+0.18j,  0.01+1.31j, -0.05-0.18j,  0.01-1.31j],\n","           [ 0.61+0.06j, -0.12-0.02j,  0.61-0.06j, -0.12+0.02j],\n","           [ 0.14+0.03j,  0.53+0.j  ,  0.14-0.03j,  0.53-0.j  ]])\n","    >>> C = 0.2*K # with proportional damping\n","    >>> wn, wd, zeta, X, Y = modes_system(M, K, C)\n","    Damping is proportional or zero, eigenvectors are real\n","    >>> X \n","    array([[-0.97,  0.23],\n","           [-0.23, -0.97]])\n","    \"\"\"\n","\n","    n = len(M)\n","\n","    Z = np.zeros((n, n))\n","    I = np.eye(n)\n","\n","    if (\n","        C is None or\n","        np.all(C == 0) or\n","        la.norm(  # check if C has only zero entries\n","            la.solve(M, C, assume_a=\"pos\") @ K - \\\n","            la.solve(M, K, assume_a=\"pos\") @ C, 2\n","        ) <\n","        1e-8 * la.norm(la.solve(M, K, assume_a=\"pos\") @ C, 2)\n","    ):\n","        w, P, S, Sinv = modes_system_undamped(M, K)\n","        wn = w\n","        wd = w\n","        # zeta = None\n","        zeta = np.diag(S.T @ C @ S) / 2 / wn\n","        wd = wn * np.sqrt(1 - zeta ** 2)\n","        X = P\n","        Y = P\n","        print(\"Damping is proportional or zero, eigenvectors are real\")\n","        return wn, wd, zeta, X, Y\n","\n","    Z = np.zeros((n, n))\n","    I = np.eye(n)\n","\n","    # creates the state space matrix\n","    A = np.vstack(\n","        [\n","            np.hstack([Z, I]),\n","            np.hstack(\n","                [-la.solve(M, K, assume_a=\"pos\"),\n","                 - la.solve(M, C, assume_a=\"pos\")]\n","            ),\n","        ]\n","    )\n","\n","    w, X = compute_eigen_values(A)\n","    _, Y = compute_eigen_values(A.T)\n","\n","    wd = abs(np.imag(w))\n","    wn = np.absolute(w)\n","    zeta = -np.real(w) / np.absolute(w)\n","\n","    Y = normalize(X, Y)\n","\n","    print(\"Damping is non-proportional, eigenvectors are complex.\")\n","\n","    return wn, wd, zeta, X, Y"],"execution_count":0,"outputs":[]},{"metadata":{"id":"6D9tofl2CiAG","colab_type":"code","outputId":"42ff783e-0d3c-4545-8166-6eaaed738222","executionInfo":{"status":"ok","timestamp":1555853281234,"user_tz":240,"elapsed":299,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"cell_type":"code","source":["# creates state-space matrix\n","\n","n = len(M)\n","Z = np.zeros((n, n))\n","I = np.eye(n)\n","\n","A = np.vstack(\n","    [np.hstack([Z, I]),\n","     np.hstack([la.solve(-M, K),\n","                la.solve(-M, C)])])\n","\n","\n","A"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[  0.  ,   0.  ,   1.  ,   0.  ],\n","       [  0.  ,   0.  ,   0.  ,   1.  ],\n","       [ -9.05,   1.05,  -2.  ,   1.  ],\n","       [ 10.5 , -10.5 ,  10.  , -20.  ]])"]},"metadata":{"tags":[]},"execution_count":28}]},{"metadata":{"id":"y3_55wzQ3V6H","colab_type":"code","outputId":"6409aaa6-84e0-4b4c-f218-1b0ef2b32b93","executionInfo":{"status":"ok","timestamp":1555855361697,"user_tz":240,"elapsed":377,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"cell_type":"code","source":["m1 = 0;\n","m2 = 0;\n","m3 = 0.1;\n","m4 = 0.01;\n","\n","c1 = 0;\n","c2 = 0.43;\n","c3 = 0.01656;\n","\n","k1 = 0;\n","k2 = 0;\n","k3 = 0;\n","k4 = 0.105;\n","k5 = 0.8;\n","\n","\n","M = np.array([[m3, 0],\n","             [0, m4]])\n","\n","K = np.array([[k3 + k4 + k5, -k4], \n","              [ -k4, k4]])\n","\n","C = np.array([[c2 + c3, -c3],\n","              [-c3, c3]])\n","\n","\n","print(M)\n","print(K)\n","print(C)\n","\n","wn, wd, zeta, X, Y = modes_system(M, K, C)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[0.1  0.  ]\n"," [0.   0.01]]\n","[[ 0.905 -0.105]\n"," [-0.105  0.105]]\n","[[ 0.44656 -0.01656]\n"," [-0.01656  0.01656]]\n","Damping is non-proportional, eigenvectors are complex.\n"],"name":"stdout"}]},{"metadata":{"id":"Vm1hLPyF3h4T","colab_type":"code","outputId":"cfcbbef8-af2c-401a-d740-e3508920a5e4","executionInfo":{"status":"ok","timestamp":1555851203100,"user_tz":240,"elapsed":240,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["wn"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2.87605557, 3.18670873, 2.87605557, 3.18670873])"]},"metadata":{"tags":[]},"execution_count":18}]},{"metadata":{"id":"0xp2FKhV4xvP","colab_type":"code","outputId":"bb171042-bea8-4c66-daaf-d1b8551cecef","executionInfo":{"status":"ok","timestamp":1555851203582,"user_tz":240,"elapsed":293,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["wd"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2.00638188, 3.02567996, 2.00638188, 3.02567996])"]},"metadata":{"tags":[]},"execution_count":19}]},{"metadata":{"id":"9b57QsUb4z-O","colab_type":"code","outputId":"ae91485a-a588-4e3b-effb-07f8ad0df6ec","executionInfo":{"status":"ok","timestamp":1555851204393,"user_tz":240,"elapsed":267,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["zeta"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.71647202, 0.31386196, 0.71647202, 0.31386196])"]},"metadata":{"tags":[]},"execution_count":20}]},{"metadata":{"id":"QjS4w5f_417G","colab_type":"code","outputId":"97c0ac58-077d-4976-dd0f-a8554ace1c0b","executionInfo":{"status":"ok","timestamp":1555851205322,"user_tz":240,"elapsed":243,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"cell_type":"code","source":["X"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.17602647+0.17139378j, -0.03538824+0.00904622j,\n","         0.17602647-0.17139378j, -0.03538824-0.00904622j],\n","       [-0.05066296+0.21196051j, -0.09327079-0.28215491j,\n","        -0.05066296-0.21196051j, -0.09327079+0.28215491j],\n","       [-0.70660386+0.j        ,  0.00802387-0.11612139j,\n","        -0.70660386-0.j        ,  0.00802387+0.11612139j],\n","       [-0.32087694-0.5384179j ,  0.94699865+0.j        ,\n","        -0.32087694+0.5384179j ,  0.94699865-0.j        ]])"]},"metadata":{"tags":[]},"execution_count":21}]},{"metadata":{"id":"eMxRSYGj439N","colab_type":"code","outputId":"7de6fbdd-264d-4b1a-bf93-b4b0f92306de","executionInfo":{"status":"ok","timestamp":1555851206450,"user_tz":240,"elapsed":344,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"cell_type":"code","source":["Y"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.32040877-3.52827269j,  1.89744027-2.08081286j,\n","        -0.32040877+3.52827269j,  1.89744027+2.08081286j],\n","       [ 0.32860663+0.2366571j , -0.02320819+2.00118971j,\n","         0.32860663-0.2366571j , -0.02320819-2.00118971j],\n","       [-0.82341816-0.84989939j,  0.20420847-0.71880806j,\n","        -0.82341816+0.84989939j,  0.20420847+0.71880806j],\n","       [ 0.02736825-0.10133771j,  0.59487295+0.12543194j,\n","         0.02736825+0.10133771j,  0.59487295-0.12543194j]])"]},"metadata":{"tags":[]},"execution_count":22}]},{"metadata":{"id":"dtOFhj2D46Te","colab_type":"code","outputId":"bd92be14-677d-4e63-d593-dadcf7833818","executionInfo":{"status":"ok","timestamp":1555855365231,"user_tz":240,"elapsed":351,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"cell_type":"code","source":["modes_system_undamped(M, K)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([2.52514929, 3.62954833]), array([[-0.7788844 ,  0.62716752],\n","        [-0.62716752, -0.7788844 ]]), array([[-2.46304873,  1.98327783],\n","        [-6.27167517, -7.78884398]]), array([[-2.46304873, -6.27167517],\n","        [ 1.98327783, -7.78884398]]))"]},"metadata":{"tags":[]},"execution_count":6}]},{"metadata":{"id":"Ft3h1Z32NGq9","colab_type":"code","colab":{}},"cell_type":"code","source":["import math\n","\n","lambda_2 = -2 + 2j\n","lambda_1 = -1 - 3j\n","\n","lambda_i = lambda_1**2 * lambda_2**2\n","\n","mu = lambda_1**2 + lambda_2**2"],"execution_count":0,"outputs":[]},{"metadata":{"id":"xhMdxqQQ3ld7","colab_type":"code","outputId":"7ccb8115-23de-4395-bab2-b73acc68f230","executionInfo":{"status":"ok","timestamp":1555967182521,"user_tz":240,"elapsed":305,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["lambda_i\n","\n","\n","mu"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-8-2j)"]},"metadata":{"tags":[]},"execution_count":54}]},{"metadata":{"id":"xeHddI2fw02z","colab_type":"code","colab":{}},"cell_type":"code","source":["p = -2 * (lambda_1.real + lambda_2.real)\n","\n","q = (lambda_1.real**2 + lambda_1.imag**2) + (4*lambda_1.real*lambda_2.real) + (lambda_2.real**2 + lambda_2.imag**2) - mu"],"execution_count":0,"outputs":[]},{"metadata":{"id":"cBuJ5u-53mEK","colab_type":"code","outputId":"e1310b19-3d75-47cf-f98e-ecc7738d0892","executionInfo":{"status":"ok","timestamp":1555967195989,"user_tz":240,"elapsed":309,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"cell_type":"code","source":["print(p)\n","\n","print(q)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["6.0\n","(34+2j)\n"],"name":"stdout"}]},{"metadata":{"id":"Wc5YOIJdxUjj","colab_type":"code","colab":{}},"cell_type":"code","source":["r = -2*(lambda_2.real) * (lambda_1.real**2 + lambda_1.imag**2) -2*(lambda_1.real) * (lambda_2.real**2 + lambda_2.imag**2)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"BXGdQFYH3mzU","colab_type":"code","outputId":"7bff9cf9-2f85-446e-fe1d-93b5dfd9c6b2","executionInfo":{"status":"ok","timestamp":1555967205867,"user_tz":240,"elapsed":305,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["print(r)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["56.0\n"],"name":"stdout"}]},{"metadata":{"id":"Kuanio6fxx0n","colab_type":"code","colab":{}},"cell_type":"code","source":["gamma = (r - (r**2 - 4*q*lambda_i))**(1/2) / (2 * lambda_i)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"JiBgwrKI3nlj","colab_type":"code","outputId":"511c7c00-86b0-4523-a66e-e2913b11fc33","executionInfo":{"status":"ok","timestamp":1555967413520,"user_tz":240,"elapsed":336,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["gamma"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.5838465022066974-0.17941359518998312j)"]},"metadata":{"tags":[]},"execution_count":68}]},{"metadata":{"id":"aR43kVg9yJpM","colab_type":"code","colab":{}},"cell_type":"code","source":["l = ((lambda_i* gamma**2) - q) / ((mu * gamma**2) - (gamma * p))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"WuTEyl6_ycXJ","colab_type":"code","outputId":"d2780662-c6b4-444b-da0f-3ce065d507c6","executionInfo":{"status":"ok","timestamp":1555967414894,"user_tz":240,"elapsed":328,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["l"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1.1748636592407404-0.8122470003433158j)"]},"metadata":{"tags":[]},"execution_count":70}]},{"metadata":{"id":"dEZzs2F-yv9L","colab_type":"code","colab":{}},"cell_type":"code","source":["k2= (l * mu - lambda_i - l**2)**(1/2)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"jW8w8io9y-xW","colab_type":"code","outputId":"1d9c0fd0-9b8c-4deb-b646-1def8bd3c0fd","executionInfo":{"status":"ok","timestamp":1555967416518,"user_tz":240,"elapsed":455,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["k2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3.4265991886556026-8.45491245978015j)"]},"metadata":{"tags":[]},"execution_count":72}]},{"metadata":{"id":"V0kkLCfOzVfZ","colab_type":"code","colab":{}},"cell_type":"code","source":["k1 = lambda_i / k2"],"execution_count":0,"outputs":[]},{"metadata":{"id":"zyHCH8VhzjN1","colab_type":"code","colab":{}},"cell_type":"code","source":["m2 = l / k2\n","\n","m1 = 1 / m2\n","\n","\n","c2 = k2 * gamma\n","\n","c1= q / c2"],"execution_count":0,"outputs":[]},{"metadata":{"id":"FfzHlqeFzucS","colab_type":"code","outputId":"92b78ad2-d00e-429d-a516-792e538b4242","executionInfo":{"status":"ok","timestamp":1555967421528,"user_tz":240,"elapsed":318,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["k1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-4.525419190763914+7.5112306637707595j)"]},"metadata":{"tags":[]},"execution_count":75}]},{"metadata":{"id":"NPLnIDgXz2mh","colab_type":"code","outputId":"fb98fc59-df5b-493c-e75e-5642b1b74a03","executionInfo":{"status":"ok","timestamp":1555967422005,"user_tz":240,"elapsed":396,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["m2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.13088598125139564+0.08591098554049409j)"]},"metadata":{"tags":[]},"execution_count":76}]},{"metadata":{"id":"EaDiLUXoz30x","colab_type":"code","outputId":"d7110098-1886-48b4-87bc-2553f3b99cff","executionInfo":{"status":"ok","timestamp":1555967422741,"user_tz":240,"elapsed":339,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["m1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5.339704994356848-3.5048774068445443j)"]},"metadata":{"tags":[]},"execution_count":77}]},{"metadata":{"id":"oDribs_Qz6PA","colab_type":"code","outputId":"6d854551-d9cf-4e2a-eb5d-4e86a7cc35e5","executionInfo":{"status":"ok","timestamp":1555967423739,"user_tz":240,"elapsed":279,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["c2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.48368170933514043-5.551149545818245j)"]},"metadata":{"tags":[]},"execution_count":78}]},{"metadata":{"id":"ush781Luz7gn","colab_type":"code","outputId":"443f9883-ef1e-4953-b0c4-d838c8e91f6f","executionInfo":{"status":"ok","timestamp":1555967424673,"user_tz":240,"elapsed":312,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["c1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.17207778073404903+6.109864064178547j)"]},"metadata":{"tags":[]},"execution_count":79}]}]}