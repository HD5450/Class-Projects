{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Matlab to python code","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"sze8EBva7ZUw"},"source":["\n","from scipy import sparse\n","from scipy.sparse.linalg import spsolve\n","import numpy as np\n","import scipy.sparse.linalg as spla\n","\n","from mpl_toolkits.mplot3d import Axes3D\n","import matplotlib.pyplot as plt\n","from matplotlib import cm\n","\n","def rhs(x, y):\n","    # Element-wise multiplication\n","    return np.multiply(x, (x - y)**3)\n","\n","def findPoint( x, y, p ):\n","  # FINDPOINT Finds a index of point p in vectors x and y\n","  # Get index of point in x\n","  xIndices = np.where(x == p[0])\n","\n","  # Get index of point in y\n","  ph = np.where(y[xIndices] == p[1])\n","  #print(xIndices)\n","  #print(p)\n","  #print(y)\n","  #print(ph)\n","  index = xIndices[ph]\n","  \n","  return index\n","\n","def matprint(mat, fmt=\"g\"):\n","  col_maxes = [max([len((\"{:\"+fmt+\"}\").format(x)) for x in col]) for col in mat.T]\n","  for x in mat:\n","    for i, y in enumerate(x):\n","      print((\"{:\"+str(col_maxes[i])+fmt+\"}\").format(y), end=\"  \")\n","  print(\"\")\n","\n","\n","#----- Generic solver\n","def matrixSolver(inputStepSize, domain, rhsEquation):\n","  # Solve poisson equation with domain given by unit squares in\n","  # matrix. The differential equation is then represented by a\n","  # matrix system of equations to solve.\n","  \n","  # Stride length\n","  steps = round(1 / inputStepSize)\n","\n","  # Refining the domain using the kronecker product - \n","  refinedDomain = np.kron(domain, np.ones(steps))\n","  \n","  # Fix x axis missing expanded values and boundaries\n","  leftSide = np.kron(refinedDomain[:, 0], np.ones((1, steps - 1)))  \n","  leftBoundary = np.zeros((leftSide.shape[0], 1))\n","  rightBoundary = np.copy(leftBoundary)\n","  leftSide.resize((8,8))\n","  leftBoundary.resize((8,8))\n","  rightBoundary.resize((8,8))\n","  refinedDomain.resize((8,8))\n","  refinedDomain = np.hstack((leftBoundary, leftSide, refinedDomain, rightBoundary))\n","\n","  # Fix y axis missing expanded values and boundaries\n","  belowBoundary = np.kron(refinedDomain[0,:], np.ones((steps-1, 1)))\n","  topBoundary = np.zeros((1, belowBoundary.shape[1]))\n","  bottomBoundary = topBoundary\n","  refinedDomain = np.vstack((belowBoundary, topBoundary, refinedDomain, bottomBoundary))\n","    \n","  # Find nonzero elements on the domain\n","  xPoints, yPoints = np.where(refinedDomain != 0)\n","\n","  # Scale x and y points based on step size\n","  xPoints = inputStepSize * xPoints\n","  yPoints = inputStepSize * yPoints\n","\n","  # Initialize operator matrix with diagonals\n","  operatorMatrix = 4 * sparse.eye(xPoints.size).toarray()\n","  \n","#   # Iterate through each neighborhood and assign -1 where necessary\n","#   for i in range(xPoints.size):\n","#       currentPoint = np.hstack((xPoints[i], yPoints[i]))\n","\n","#       # Set up coordinates of surrounding points\n","#       above = np.hstack((currentPoint[0], currentPoint[1] + inputStepSize))\n","#       below = np.hstack((currentPoint[0], currentPoint[1] - inputStepSize))\n","#       left = np.hstack((currentPoint[0] - inputStepSize, currentPoint[1]))\n","#       right = np.hstack((currentPoint[0] + inputStepSize, currentPoint[1]))\n","      \n","#       # Vector of surrounding points for easy iteration\n","#       surroundingPoints = np.vstack((above, below, left, right))\n","#       #print(surroundingPoints)\n","\n","#       # Retrieve individual indices for each \n","#       for j in np.arange(0, surroundingPoints.size).reshape(-1):\n","#           idx = findPoint(xPoints, yPoints, np.vstack((surroundingPoints[j][0], surroundingPoints[j][1])))\n","\n","  for i in np.arange(0, xPoints.size).reshape(-1):\n","    current_x = np.array(xPoints[i])\n","    current_y = np.array(yPoints[i])\n","\n","    currentPoint = np.hstack((current_x, current_y))\n","    above = np.hstack((currentPoint[0], currentPoint[1] + inputStepSize))\n","    below = np.hstack((currentPoint[0], currentPoint[1] - inputStepSize))\n","    left = np.hstack((currentPoint[0] - inputStepSize, currentPoint[1]))\n","    right = np.hstack((currentPoint[0] + inputStepSize, currentPoint[1]))\n","       \n","    neighbors = np.vstack((above, below, left, right))\n","    for j in np.arange(1, neighbors.size / 2).reshape(-1):\n","      x_indices = np.where(xPoints == np.vstack((neighbors[int(j), 0],\n","                                                       neighbors[int(j), 1]))[0][0])\n","         \n","      index = np.where(\n","      yPoints[x_indices] == np.vstack((neighbors[int(j), 0],\n","                                                 neighbors[int(j), 1]))[1][0])\n","      operatorMatrix[i, index] = -1\n","\n","\n","  # Create right hand side vector\n","  rhsVector = inputStepSize ** 2 * rhsEquation(xPoints,yPoints)\n","\n","  # Solve the system\n","  t = spla.spsolve(operatorMatrix, rhsVector)\n","  t = np.copy(t)\n","  T = t.reshape(t, (-1, - 1))\n","  \n","  # Coordinates plotted for visualization\n","  x = np.arange(0, inputStepSize, domain.shape[1]+1)\n","  y = np.arange(0, inputStepSize, domain.shape[0]+1)\n","  X, Y = np.meshgrid(x, y);\n","  \n","  Z = refinedDomain;\n","  for i in range(T.size):\n","      Z[np.where(Z == 1, 1)] = T[i];\n","  \n","\n","  # Remove values for x and y that are not internal or boundary points\n","  arr_temp = np.vstack([1,1,1], [1,0,1], [1,1,1])\n","  convolve2d_temp = np.logical_not(signal.convolve2d(Z, arr_temp, mode='same'))\n","  zeroIndices = np.where(convolve2d_temp)\n","  \n","  X[zeroIndices] = np.nan;\n","  Y[zeroIndices] = np.nan;\n","  \n","  return X, Y, Z"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"neftNiCPL47d","executionInfo":{"status":"error","timestamp":1550083052273,"user_tz":300,"elapsed":248,"user":{"displayName":"Saran Ahluwalia","photoUrl":"","userId":"09376436326309786117"}},"outputId":"c9e73d36-21d2-4b5f-9ef1-e44e45d27204","colab":{"base_uri":"https://localhost:8080/","height":351}},"source":["stepSize = 0.5\n","\n","domain = np.vstack([[1,1,1,1],[1,1,0,0], [1,0,0,0]])\n","\n","X, Y, Z = matrixSolver(stepSize, domain, rhs)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/scipy/sparse/linalg/dsolve/linsolve.py:133: SparseEfficiencyWarning: spsolve requires A be CSC or CSR matrix format\n","  SparseEfficiencyWarning)\n"],"name":"stderr"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-eb66ed69c429>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdomain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mZ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmatrixSolver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstepSize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdomain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrhs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-4-f2deda62b512>\u001b[0m in \u001b[0;36mmatrixSolver\u001b[0;34m(inputStepSize, domain, rhsEquation)\u001b[0m\n\u001b[1;32m    119\u001b[0m   \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspla\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspsolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moperatorMatrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrhsVector\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m   \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m   \u001b[0mT\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m   \u001b[0;31m# Coordinates plotted for visualization\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: only integer scalar arrays can be converted to a scalar index"]}]},{"cell_type":"code","metadata":{"id":"FmgW38rTf1z9"},"source":[""],"execution_count":null,"outputs":[]}]}